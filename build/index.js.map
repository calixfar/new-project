{"version":3,"sources":["../src/index.js"],"names":["dotenv","config","path","typeDefs","app","server","ApolloServer","resolvers","context","req","token","headers","jwt","verify","process","env","SECRETO","usuarioActual","console","log","applyMiddleware","listen","port","graphqlPath"],"mappings":";;;;;;;;AAAA;;AACA;;AAEA;;AACA;;AAEA;;AACA;;AALA;AAGAA,mBAAOC,MAAP,CAAc;AAACC,EAAAA,IAAI,EAAE;AAAP,CAAd;;AAIA,IAAMC,QAAQ,GAAG,iCAAa,4BAAb,CAAjB;AACA,IAAMC,GAAG,GAAG,0BAAZ;AAEA,IAAMC,MAAM,GAAG,IAAIC,iCAAJ,CAAiB;AAC5BH,EAAAA,QAAQ,EAARA,QAD4B;AAE5BI,EAAAA,SAAS,EAATA,oBAF4B;AAG5BC,EAAAA,OAAO;AAAA;AAAA;AAAA,iCAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAQC,cAAAA,GAAR,QAAQA,GAAR;AACN;AACMC,cAAAA,KAFA,GAEQD,GAAG,CAACE,OAAJ,CAAY,eAAZ,CAFR;;AAAA,oBAGHD,KAAK,KAAK,MAHP;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,qBAM8BE,yBAAIC,MAAJ,CAAWH,KAAX,EAAkBI,OAAO,CAACC,GAAR,CAAYC,OAA9B,CAN9B;;AAAA;AAMQC,cAAAA,aANR;AAOER,cAAAA,GAAG,CAACQ,aAAJ,GAAoBA,aAApB;AAPF,gDAQS;AAACA,gBAAAA,aAAa,EAAbA;AAAD,eART;;AAAA;AAAA;AAAA;AAUEC,cAAAA,OAAO,CAACC,GAAR;;AAVF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAHqB,CAAjB,CAAf;AAoBAd,MAAM,CAACe,eAAP,CAAuB;AAAChB,EAAAA,GAAG,EAAHA;AAAD,CAAvB;AAEAA,GAAG,CAACiB,MAAJ,CAAW;AAACC,EAAAA,IAAI,EAAE;AAAP,CAAX,EAAyB;AAAA,SAAMJ,OAAO,CAACC,GAAR,sDAA0Dd,MAAM,CAACkB,WAAjE,EAAN;AAAA,CAAzB","sourcesContent":["import {resolvers} from './data.js/resolvers'\r\nimport {ApolloServer} from 'apollo-server-express';\r\n//import {typeDefs} from './data.js/schema'\r\nimport express from 'express'\r\nimport dotenv from 'dotenv'\r\ndotenv.config({path: 'variables.env'})\r\nimport jwt from 'jsonwebtoken';\r\nimport {importSchema} from 'graphql-import'\r\n\r\nconst typeDefs = importSchema('src/data.js/schema.graphql');\r\nconst app = express();\r\n\r\nconst server = new ApolloServer({\r\n    typeDefs, \r\n    resolvers,\r\n    context : async ({req}) => {\r\n        //obtener token\r\n        const token = req.headers['authorization'];\r\n        if(token !== 'null'){\r\n            try {\r\n                //verificar el token del cliente\r\n                const usuarioActual = await jwt.verify(token, process.env.SECRETO)\r\n                req.usuarioActual = usuarioActual;\r\n                return {usuarioActual}\r\n            } catch (error) {\r\n                console.log(error)\r\n            }\r\n        }\r\n    }\r\n\r\n    });\r\n\r\nserver.applyMiddleware({app})\r\n\r\napp.listen({port: 4000}, () => console.log(`Servidor corriendo en http://localhost:4000${server.graphqlPath}`))"],"file":"index.js"}