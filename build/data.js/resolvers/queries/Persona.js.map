{"version":3,"sources":["../../../../src/data.js/resolvers/queries/Persona.js"],"names":["obtenerPersonas","root","input","limite","offset","filtro","undefined","totalFidelizados","$gte","min","max","edad","$lte","Persona","find","Object","keys","length","param","tipo","getOwnPropertyNames","includes","property","$regex","RegExp","limit","skip","personsTipo","countDocuments","total","console","log","obtenerPersonasBarrio","barrio","totalPersonasBarrio","fidelizado","totalPersonasFideBarrio","obtenerPersona","id","Promise","resolve","rejects","findById","_id","error","persona","validarCedula","cedula","asyncObtenerPersonas","exec","obtenerPersonasCumple","mensajeCumple","persons","cumple","fechaActual","Date","dia","getDate","mes","getMonth","anio","getFullYear","arrayCumple","map","person","i","fechaCumple","push","obtenerPersonasSuperior","totalPersonas","all","$type","count"],"mappings":"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","sourcesContent":["import Persona from './../../models/Persona'\r\nimport { rejects } from 'assert';\r\nimport mongoose from 'mongoose';\r\n\r\n\r\nexport const obtenerPersonas = async (root, {input,limite,offset, filtro}) => {\r\n    if(filtro !== undefined){\r\n        if(input.totalFidelizados) {\r\n            input['totalGeneral.totalFidelizados'] = {$gte: input.totalFidelizados};\r\n            delete input['totalFidelizados']\r\n        }\r\n        if(input.min && input.max){\r\n            input.edad = {$gte: input.min, $lte: input.max }\r\n            delete input['min']\r\n            delete input['max']\r\n            return Persona.find(input)\r\n        }\r\n        if(input.min)  {\r\n            input.edad = {$gte: input.min}\r\n            delete input['min']\r\n        } \r\n        if(input.max)  {\r\n            input.edad = {$lte: input.max}\r\n            delete input['max']\r\n        } \r\n        return Persona.find(input)\r\n    }\r\n    else{\r\n        if(Object.keys(input).length > 0){\r\n            let param = {tipo: input.tipo}\r\n            if(Object.getOwnPropertyNames(input).includes('nombre') || \r\n            Object.getOwnPropertyNames(input).includes('cedula')) {\r\n                let property = Object.getOwnPropertyNames(input).includes('nombre') ?  'nombre' : 'cedula'\r\n                param[property] = {$regex: new RegExp(`^${input[property]}`)}\r\n            }\r\n            const personsTipo = await Persona.find(param).limit(limite).skip(offset)\r\n            personsTipo.total = await Persona.countDocuments(param);\r\n            console.log(personsTipo, 'asdasd')\r\n            return personsTipo;\r\n        }\r\n    }\r\n}\r\nexport const obtenerPersonasBarrio = async (root, {barrio}) => {\r\n    // return new Promise( ( resolve, rejects ) => {\r\n    //     Persona.countDocuments({barrio}, ( error, count ) => {\r\n    //         if(error) rejects(error)\r\n    //         else resolve(count)\r\n    //     }) \r\n    // } )\r\n    let totalPersonasBarrio = await Persona.countDocuments({barrio})\r\n    let totalPersonasFideBarrio = await Persona.countDocuments({barrio, fidelizado: true})\r\n    return {totalPersonasBarrio,totalPersonasFideBarrio}\r\n\r\n}\r\nexport const obtenerPersona = (root, {id}) => {\r\n    return new Promise((resolve,rejects) => {\r\n        Persona.findById({_id: id}, (error, persona) => {\r\n            if(error) rejects(error)\r\n            else resolve(persona)\r\n        })\r\n    })\r\n}\r\nexport const validarCedula = (root, {cedula}) => {\r\n    console.log(cedula)\r\n    return Persona.find({cedula})}\r\n\r\nconst asyncObtenerPersonas = (param,limit,offset) => Persona.find(param).limit(limit).skip(offset).exec()\r\nexport const obtenerPersonasCumple = async () => {\r\n    let param = {mensajeCumple: false}\r\n    //param['mensajeCumple'] = false;\r\n    const persons = await asyncObtenerPersonas(param)\r\n    let cumple = '';\r\n    let fechaActual = new Date()\r\n    let dia = fechaActual.getDate(), mes = fechaActual.getMonth(), anio = fechaActual.getFullYear();\r\n    let arrayCumple = []\r\n    persons.map((person, i) => {\r\n        cumple = person.fechaCumple ? person.fechaCumple : ''\r\n        if(cumple !== ''){\r\n            if((cumple.getDate()+1) === dia && mes === cumple.getMonth()) {\r\n                arrayCumple.push(person);\r\n                arrayCumple[arrayCumple.length - 1].edad = anio - cumple.getFullYear();\r\n            }\r\n            cumple = ''\r\n        }\r\n    })\r\n    return(arrayCumple)\r\n    // let fechaActual = new Date()\r\n    // let dia = fechaActual.getDate(), mes = fechaActual.getMonth();\r\n    // let regex = new RegExp(`^[0-9]{4}-${mes}-${dia}`)\r\n    // return Persona.find({fechaCumple: {$dateFromParts: {\r\n    //     'month': mes,\r\n    //     'day': dia\r\n    // }}})\r\n}\r\nexport const obtenerPersonasSuperior = (root, {input}) => {\r\n    if(input && input.tipo) {\r\n        return Persona.find({'superior.id' : input.id, tipo: input.tipo })}\r\n    else return Persona.find({'superior.id' : input.id})\r\n}\r\n\r\nexport const totalPersonas = (root, {input, all}) => {\r\n    if(all) return Persona.countDocuments({})\r\n    let param = (input.tipo) ? {tipo: input.tipo} : {tipo: {$type: 7}}\r\n    if(Object.keys(input).length > 1){\r\n        let property = Object.getOwnPropertyNames(input).includes('nombre') ? 'nombre' : 'cedula'\r\n        param[property] = {$regex: new RegExp(`^${input[property]}`)}\r\n    }\r\n    return new Promise((resolve, rejects) => {\r\n        Persona.countDocuments(param, (error,count) => {\r\n            if(error) rejects(error)\r\n            else resolve(count)\r\n        })\r\n    })\r\n}"],"file":"Persona.js"}