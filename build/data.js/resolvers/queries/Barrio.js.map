{"version":3,"sources":["../../../../src/data.js/resolvers/queries/Barrio.js"],"names":["searchIdBarrio","root","nombre","console","log","Promise","resolve","rejects","Barrio","findOne","error","barrio","obtenerBarrios","id","input","limit","offset","zona","Object","keys","length","$type","find","skip","obtenerBarrio","findById","topBarrios","barrios","promisePerson","map","Persona","countDocuments","fidelizado","promise","all","persons","res","person","i","votosFide","sort","a","b","totalBarrios","count"],"mappings":"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","sourcesContent":["import Barrio from './../../models/Barrio'\r\nimport Persona from './../../models/Persona'\r\nimport { resolve } from 'dns';\r\nimport { rejects } from 'assert';\r\nimport { Mongoose } from 'mongoose';\r\n\r\nexport  const searchIdBarrio = (root,{nombre}) => {\r\n    console.log(nombre)\r\n    return new Promise((resolve,rejects) => {\r\n        Barrio.findOne({nombre}, (error, barrio) => {\r\n            if(error) rejects(error)\r\n            else resolve(barrio)\r\n        })\r\n    })\r\n}\r\nexport const obtenerBarrios = (root, {id,input,limit,offset}) => {\r\n    const zona = (input && Object.keys(input).length > 0) ?input.zona : {$type : 7}\r\n    return Barrio.find({zona}).limit(limit).skip(offset)\r\n}\r\n\r\nexport const obtenerBarrio = (root, {id}) => {\r\n    return new Promise((resolve,rejects) => {\r\n        Barrio.findById(id, (error, barrio) => {\r\n            if(error) rejects(error)\r\n            else resolve(barrio)\r\n        })\r\n    })\r\n}\r\nexport const topBarrios = async (root, {zona}) => {\r\n    //traer todos los barrios que pertenezcan a la zona\r\n    let barrios = await Barrio.find({zona})\r\n    let promisePerson = barrios.map( async barrio => {\r\n        let promise = await Persona.countDocuments({fidelizado: true, barrio: barrio.id})\r\n        return promise;\r\n    })\r\n    let persons = await Promise.all(promisePerson)\r\n    let res = persons.map((person, i) => (\r\n        {\r\n            id: barrios[i].id, \r\n            nombre: barrios[i].nombre,\r\n            votosFide: person \r\n        }\r\n    ))\r\n    return(res.sort(function (a, b) {return (b.votosFide - a.votosFide)}))\r\n   \r\n\r\n}\r\n\r\nexport const totalBarrios = (root, {input}) => {\r\n    const zona = (input && Object.keys(input).length > 0) ?input.zona : {$type : 7}\r\n    return new Promise((resolve,rejects) => {\r\n        Barrio.countDocuments({zona}, (error, count) => {\r\n            if(error) rejects(error)\r\n            else resolve(count)\r\n        })\r\n        \r\n    })\r\n}"],"file":"Barrio.js"}