{"version":3,"sources":["../../../../src/data.js/resolvers/mutations/Persona.js"],"names":["barrios","Barrio","find","exec","validarCedula","cedula","Persona","registroMasivoPersonas","root","input","console","log","promises","datos","map","person","i","res","Promise","all","results","errors","length","personaNueva","registroFromExcel","arrayError","register","resultFindCedula","persona","push","enviarSMS","accountSid","authToken","client","twilio","messages","create","body","nombre","edad","to","from","then","message","sid","findByIdAndUpdate","_id","mongoose","Types","ObjectId","id","mensajeCumple","error","calcularEdad","cumple","birthday","Date","actual","day","getDate","mes","getMonth","descuento","getFullYear","edadSinDes","nuevaPersona","apellido","fechaCumple","estadoCivil","ocupacion","expectativaOcupacion","celular","direccion","correo","tipo","zona","barrio","lugarVotacion","mesaVotacion","metaVotos","estadoContacto","genero","dinero","fidelizado","tipoVoto","superior","perfil","macros","lideres","multip","mulip","votantes","totalGeneral","save","crearPersona","crearPersona_ActualiarTotalGeneral","tipoGrupo","general","valor","Object","keys","idSuperior","fidelizados","queryCampo","queryInc","queryInc2","tipoGrupoGeneral","$push","$inc","findSuperior","superiorDirecto","validarSuperior","cont","antSuperior","nextSuperior","findById","mainFindSuperior","updateMany","$unset","multi","findByIdAndDelete","$pull","eliminarPersona","actualizarPersona","resolve","rejects"],"mappings":"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","sourcesContent":["import Persona from './../../models/Persona'\r\nimport { rejects } from 'assert';\r\nimport { resolve } from 'url';\r\nimport mongoose from 'mongoose'\r\nimport twilio from 'twilio'\r\n\r\nconst barrios = () => Barrio.find({}).exec()\r\nconst validarCedula = (cedula) => Persona.find({cedula}).exec()\r\nexport const registroMasivoPersonas  = async (root, input) => {\r\n    console.log(input)\r\n    const promises = input.input.datos.map(async (person, i) => {\r\n        const res = await validarCedula(person.cedula)\r\n        return res;\r\n    }) \r\n    const results = await Promise.all(promises)\r\n    console.log('object' ,results)\r\n    const errors = input.input.datos.map((person, i) => {\r\n        if(results[i].length === 0) {\r\n            console.log('entro con: ' +person.cedula)\r\n            personaNueva(person)\r\n        }\r\n        else {\r\n            console.log('entro al error')\r\n            return person\r\n        }\r\n    })\r\n    console.log('errorrs', errors)\r\n    return errors\r\n} \r\nexport const registroFromExcel = async (root, input)  =>{\r\n    let arrayError = []\r\n    let register = async () => {\r\n        input.input.datos.map(async person => {\r\n            let resultFindCedula = await validarCedula(person.cedula)\r\n            if(resultFindCedula.length === 0) {\r\n                let persona = personaNueva(person)\r\n                console.log('repuessta persona',persona)\r\n            }\r\n            else {\r\n                console.log('retorno')\r\n                // console.log('error')\r\n                 arrayError.push(person)\r\n                 console.log(arrayError)\r\n            }\r\n            resultFindCedula= ''\r\n        })\r\n        console.log('error',arrayError) \r\n    }\r\n    register()\r\n}\r\nexport const  enviarSMS = (root, {input}) => {\r\n    let accountSid = 'AC05f4e20a2fd1c613909e39e37066316d'; // Your Account SID from www.twilio.com/console\r\n    let authToken = 'b8d6f66481f92501ad2f2c41ed47fa7f';\r\n    var client = new twilio(accountSid, authToken);\r\n    //let to= `+57${input.celular}`\r\n    //console.log(to)\r\n    client.messages.create({\r\n        body: `${input.nombre}, el equipo de trabajo de Firme por Aguachica te desea muchas felicidades y bendiciones en tu cumpleaño número ${input.edad}, gracias por hacer parte de este proyecto.`,\r\n        to:`+57${input.to}`,  // Text this number\r\n        from: '+18166056578' // From a valid Twilio number\r\n    })\r\n    .then((message) => {\r\n        console.log(message.sid)\r\n        Persona.findByIdAndUpdate({_id: mongoose.Types.ObjectId(input.id)}, {mensajeCumple: true}, () => {\r\n            (error) => {\r\n                if(error) console.log(error)\r\n                else('enviado y actualizado')\r\n            }\r\n        })\r\n    });\r\n\r\n}\r\n\r\nlet calcularEdad = (cumple) => {\r\n    if(cumple){\r\n        let birthday = new Date(cumple)\r\n        let actual = new Date();\r\n        let day = actual.getDate(), mes = actual.getMonth()\r\n        let descuento = false, edad = actual.getFullYear() - birthday.getFullYear();\r\n        let edadSinDes = edad;\r\n        if(mes <= birthday.getMonth()){\r\n            edad-=1;\r\n            if(mes === (birthday.getMonth()) && birthday.getDate()+1 <= day){\r\n                edad+=1\r\n            }\r\n        }\r\n        return(edad)\r\n    }\r\n}\r\nconst personaNueva = (input) => {\r\n                 const nuevaPersona = new Persona({\r\n                    cedula: input.cedula,\r\n                    nombre: input.nombre,\r\n                    apellido: input.apellido,\r\n                    fechaCumple: input.fechaCumple,\r\n                    estadoCivil: input.estadoCivil,\r\n                    ocupacion: input.ocupacion,\r\n                    expectativaOcupacion: input.expectativaOcupacion,\r\n                    celular: input.celular,\r\n                    direccion: input.direccion,\r\n                    correo: input.correo,\r\n                    edad: calcularEdad(input.fechaCumple),\r\n                    tipo: input.tipo,\r\n                    zona: input.zona,\r\n                    barrio: input.barrio ? input.barrio : null, \r\n                    lugarVotacion: input.lugarVotacion, \r\n                    mesaVotacion: input.mesaVotacion, \r\n                    metaVotos: input.metaVotos, \r\n                    estadoContacto: input.estadoContacto,\r\n                    genero: input.genero,\r\n                    dinero: input.dinero,\r\n                    fidelizado: input.fidelizado, \r\n                    tipoVoto: input.tipoVoto,\r\n                    superior: input.superior,\r\n                    perfil: input.perfil,\r\n                    macros: input.macros,\r\n                    lideres: input.lideres ,\r\n                    multip: input.mulip,\r\n                    votantes: input.votantes,\r\n                    totalGeneral: input.totalGeneral\r\n                })\r\n                nuevaPersona.id = nuevaPersona._id\r\n                // nuevaPersona.totalGeneral= {\r\n                //     totalGeneralLideres: {\r\n                //         totalPersonas: 0,\r\n                //         totalFidelizados: 0\r\n                //     } ,\r\n                //     totalGeneralMacros: {\r\n                //         totalPersonas: 0,\r\n                //         totalFidelizados: 0\r\n                //     } ,\r\n                //     totalGeneralMultip: {\r\n                //         totalPersonas: 0,\r\n                //         totalFidelizados: 0\r\n                //     } ,\r\n                //     totalGeneralVotantes: {\r\n                //         totalPersonas: 0,\r\n                //         totalFidelizados: 0\r\n                //     }  \r\n                // }\r\n                nuevaPersona.save((error) => error ? error : nuevaPersona)\r\n                return nuevaPersona\r\n}\r\n\r\nexport const crearPersona = (root,{input}) => {\r\n    crearPersona_ActualiarTotalGeneral(input) \r\n}\r\n// Saber a que grupo de los generales pertenece\r\n//Recibe dos parametros 1. el tipo y 2. Para que clase de campo estará dirigido\r\nconst tipoGrupo = (tipo, general) => {\r\n    if(general){\r\n        return tipo === 'lider' ? 'totalGeneralLideres' : \r\n               tipo === 'macro' ? 'totalGeneralMacros' :\r\n               tipo === 'multiplicador' ? 'totalGeneralMultip' : 'totalGeneralVotantes';\r\n    }\r\n    else {\r\n        return tipo === 'lider' ? 'lideres' : \r\n               tipo === 'macro' ? 'macros' :\r\n               tipo === 'multiplicador' ? 'multip' : 'votantes';\r\n    }\r\n    \r\n}\r\n//const tipoGrupoTotales = (tipo) => \r\n    \r\n// Saber si una persona esta fidelizada o no \r\nconst fidelizado = (valor) => valor ? 1 : 0;\r\n//metodo general para ejecutar crear personay actualizar totales directos y generales\r\nconst crearPersona_ActualiarTotalGeneral = async (input) => {\r\n    let nuevaPersona = personaNueva(input);\r\n    console.log('nueva Persona',nuevaPersona)\r\n    //validar si la persona tiene un superior\r\n    if(Object.keys(nuevaPersona.superior).length > 0){\r\n        const {tipo} = nuevaPersona;\r\n        const idSuperior = nuevaPersona.superior.id\r\n        // cambios totales directos\r\n        let fidelizados = fidelizado(nuevaPersona.fidelizado)\r\n        let queryCampo = {}, queryInc={}, queryInc2={};\r\n        const tipoGrupoGeneral = tipoGrupo(nuevaPersona.tipo, true)\r\n        queryCampo[tipoGrupo(tipo, false)] = {'id': nuevaPersona._id};\r\n        queryInc['totalPersonas'] = 1;\r\n        queryInc['totalFidelizados'] = fidelizados;\r\n        queryInc[`totalGeneral.${tipoGrupoGeneral}.totalFidelizados`] = fidelizados\r\n        queryInc[`totalGeneral.${tipoGrupoGeneral}.totalPersonas`] = 1\r\n        queryInc['totalGeneral.totalPersonas'] = 1\r\n        queryInc['totalGeneral.totalFidelizados'] = fidelizados\r\n        queryInc2['totalGeneral.totalPersonas'] = 1\r\n        queryInc2['totalGeneral.totalFidelizados'] = fidelizados\r\n        queryInc2[`totalGeneral.${tipoGrupoGeneral}.totalFidelizados`] = fidelizados\r\n        queryInc2[`totalGeneral.${tipoGrupoGeneral}.totalPersonas`] = 1\r\n        Persona.findByIdAndUpdate(\r\n                {_id: idSuperior}, \r\n                {$push: queryCampo, \r\n                $inc: queryInc }, \r\n                (error) => {\r\n                    if(error) return(error)\r\n                });\r\n        //Cambios totales generales\r\n        let superiorDirecto = await findSuperior(mongoose.Types.ObjectId(idSuperior))\r\n        //console.log('superiorDirecto',superiorDirecto)\r\n        let superior = '', validarSuperior = true, cont = 0, antSuperior = true;\r\n        let nextSuperior = true; \r\n        do{\r\n            if(cont === 0 && superiorDirecto.superior){\r\n                superior = await findSuperior(mongoose.Types.ObjectId(superiorDirecto.superior.id));\r\n                antSuperior = superior\r\n                Persona.findByIdAndUpdate({_id : superior.id}, \r\n                    {\r\n                        $inc: queryInc2\r\n                    }, (error) => error ? error : true)\r\n                cont++;   \r\n                    //nextSuperior = superior.superior ? true : false;\r\n                    //console.log('ant dentro del cont', antSuperior)\r\n                //}\r\n            }else {\r\n                if(antSuperior){\r\n                    //console.log('ant', antSuperior)\r\n                    validarSuperior = antSuperior.superior ? true : false\r\n                    if(validarSuperior){\r\n                        superior = await findSuperior(mongoose.Types.ObjectId(antSuperior.superior.id));\r\n                        //console.log('supercon', superior)\r\n                            Persona.findByIdAndUpdate({_id : superior.id}, \r\n                                {\r\n                                    $inc: queryInc2\r\n                                }, (error) => error ? error : true)\r\n                            cont++\r\n                            antSuperior = superior;\r\n                    }\r\n                }\r\n            }\r\n            \r\n\r\n        }while(validarSuperior)\r\n    }\r\n}\r\nconst findSuperior = (id) => Persona.findById({'_id' : id}).exec()\r\nconst mainFindSuperior = async (id) => {\r\n    const person = await findSuperior(id)\r\n    Persona.updateMany({'superior.id' : id}, {$unset: {superior:''}}, {multi: true}, (error) => {\r\n        if(error) return(error)\r\n    })\r\n    Persona.findByIdAndDelete({_id: mongoose.Types.ObjectId(id)}, (error) => {\r\n        if(error) return(error)\r\n    })\r\n    if(Object.keys(person.superior).length > 0){\r\n        let fidelizado = person.fidelizado ? -1 : 0\r\n        let queryCampo = {}\r\n        let tipo = person.tipo === 'lider' ? 'lideres' : \r\n                   person.tipo === 'macro' ? 'macros' :\r\n                   person.tipo === 'multiplicador' ? 'multip' : 'votantes';\r\n        queryCampo[tipo] = {'id' : id};\r\n        Persona.findByIdAndUpdate(\r\n            {'_id': mongoose.Types.ObjectId(person.superior.id)},\r\n            {$inc: {'totalFidelizados': fidelizado, 'totalPersonas' : -1},\r\n             $pull: queryCampo },\r\n            (error) => {if(error) return error}\r\n        )\r\n    }\r\n}\r\n\r\nexport const eliminarPersona = (root,{id}) => {\r\n    mainFindSuperior(id)\r\n}\r\n\r\nexport const actualizarPersona = (root, {input}) => {\r\n    return new Promise((resolve, rejects) => {\r\n        Persona.findByIdAndUpdate({_id: input.id}, {\r\n            cedula: input.cedula,\r\n            nombre: input.nombre,\r\n            apellido: input.apellido,\r\n            fechaCumple: input.fechaCumple,\r\n            estadoCivil: input.estadoCivil,\r\n            ocupacion: input.ocupacion,\r\n            perfil: input.perfil,\r\n            celular: input.celular,\r\n            direccion: input.direccion,\r\n            correo: input.correo,\r\n            edad: calcularEdad(input.fechaCumple),\r\n            zona: input.zona,\r\n            barrio: input.barrio ? input.barrio : null, \r\n            lugarVotacion: input.lugarVotacion, \r\n            mesaVotacion: input.mesaVotacion, \r\n            metaVotos: input.metaVotos, \r\n            estadoContacto: input.estadoContacto,\r\n            genero: input.genero,\r\n            dinero: input.dinero,\r\n            fidelizado: input.fidelizado, \r\n        }, {new: true}, (error, persona) => {\r\n            if(error) rejects(error)\r\n            else resolve(persona)\r\n        })\r\n    })\r\n}\r\n"],"file":"Persona.js"}